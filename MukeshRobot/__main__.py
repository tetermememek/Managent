import importlib
import re
import time
import asyncio
from platform import python_version as y
from sys import argv
from pyrogram import __version__ as pyrover
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, Update
from telegram import __version__ as telever
from telegram.error import (
    BadRequest,
    ChatMigrated,
    NetworkError,
    TelegramError,
    TimedOut,
    Unauthorized,
)
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    Filters,
    MessageHandler,
)
from telegram.ext.dispatcher import DispatcherHandlerStop
from telegram.utils.helpers import escape_markdown
from telethon import __version__ as tlhver

import MukeshRobot.modules.no_sql.users_db as sql
from MukeshRobot import (
    BOT_NAME,
    BOT_USERNAME,
    LOGGER,
    OWNER_ID,
    START_IMG,
    SUPPORT_CHAT,
    TOKEN,
    StartTime,
    dispatcher,
    pbot,
    telethn,
    updater,
)
from MukeshRobot.modules import ALL_MODULES
from MukeshRobot.modules.helper_funcs.chat_status import is_user_admin
from MukeshRobot.modules.helper_funcs.misc import paginate_modules


def get_readable_time(seconds: int) -> str:
    count = 0
    ping_time = ""
    time_list = []
    time_suffix_list = ["s", "m", "h", "days"]

    while count < 4:
        count += 1
        remainder, result = divmod(seconds, 60) if count < 3 else divmod(seconds, 24)
        if seconds == 0 and remainder == 0:
            break
        time_list.append(int(result))
        seconds = int(remainder)

    for x in range(len(time_list)):
        time_list[x] = str(time_list[x]) + time_suffix_list[x]
    if len(time_list) == 4:
        ping_time += time_list.pop() + ", "

    time_list.reverse()
    ping_time += ":".join(time_list)

    return ping_time
PM_START_TEX = """
 ú·¥á ü ü·¥è `{}`, ·¥Ä·¥ò·¥Ä ·¥ã·¥Ä ô·¥Ä Ä ·¥ã·¥Ä·¥ã \n·¥õ·¥ú…¥…¢…¢·¥ú  ô·¥á…¥·¥õ·¥Ä Ä  è·¥Ä . . . 
"""


PM_START_TEXT = """ 
* ú·¥á è* {} 
*…™'·¥ç {} …¢·¥Ä ·¥Ä·¥Ö·¥Ä  è·¥Ä…¥…¢ s·¥ò·¥ás…™·¥Ä ü s·¥Ä·¥ç·¥Ä ·¥Ä·¥ä·¥Ä ·¥ã·¥á·¥ã  ô·¥è·¥õ ·¥ç·¥ús…™·¥Ñ  ü·¥Ä·¥á…¥
 ô·¥è·¥õ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢·¥á ü·¥è ü·¥Ä ·¥Ö·¥Ä…¥ ·¥ç·¥á·¥ç·¥ú·¥õ·¥Ä Ä ·¥ç·¥úÍú±…™·¥ã
·¥Ö…™…¢ Ä·¥ú·¥ò ·¥Ä…¥·¥Ö·¥Ä ·¥Ö·¥á…¥…¢·¥Ä…¥  ô·¥á Ä ô·¥Ä…¢·¥Ä…™ Íú∞…™·¥õ·¥ú Ä*
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
   *‚ûª ·¥ús·¥á Äs ¬ª* {}
   *‚ûª ·¥Ñ ú·¥Ä·¥õs ¬ª* {}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
*·¥Ö·¥á·¥†: @Foundermidnight

·¥ã ü…™·¥ã ·¥õ·¥è·¥ç ô·¥è ü ·¥Ö…™  ô·¥Ä·¥°·¥Ä ú ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢·¥á·¥õ·¥Ä ú·¥ú…™ ·¥ç·¥è·¥Ö·¥ú ü ·¥Ö·¥Ä…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ‚ö†Ô∏è*
"""

buttons = [
        [
            InlineKeyboardButton(text="·¥ä·¥Ä·¥ä·¥Ä…¥·¥Ä…¥ ·¥õ·¥á ü·¥á üì©", callback_data="Music_bot"),
        ],
        [
            InlineKeyboardButton(text="·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ‚ÅâÔ∏è", callback_data="donation_help"),
            InlineKeyboardButton(text="·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ üíà", callback_data="mukesh_support"),
        ],
        [
            InlineKeyboardButton(text="·¥Ö·¥á·¥† üëë", callback_data="expert_help"),
            InlineKeyboardButton(text="·¥Ö·¥è…¥·¥ÄÍú±…™üí∞", callback_data="Main_help"),
        ],
    [
        InlineKeyboardButton(
            text="·¥õ·¥Ä·¥ç ô·¥Ä ú ·¥ã·¥á …¢·¥Ñ ·¥Ä·¥ç·¥ò·¥Äs  ü·¥ú ‚ûï",
            url=f"https://t.me/{dispatcher.bot.username}?startgroup=true",
        ),
    ],
]

HELP_STRINGS = f"""
¬ª *{BOT_NAME}  ·¥ã ü…™·¥ã ·¥Ä·¥ä·¥Ä ·¥ã·¥Ä·¥ã  ô·¥ú·¥õ·¥õ·¥è…¥ …¥ è·¥Ä ·¥ã·¥Ä ü·¥è ·¥ç·¥Ä·¥ú ·¥õ·¥Ä·¥ú ·¥õ·¥á…¥·¥õ·¥Ä…¥…¢ ·¥ç·¥è·¥Ö·¥ú ü·¥á ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú …¥ è·¥Ä*"""

DONATE_STRING = f""" ú·¥á è  ô·¥Ä ô è,
   ú·¥Ä·¥©·¥© è ·¥õ·¥è  ú·¥á·¥Ä Ä ·¥õ ú·¥Ä·¥õ  è·¥è·¥ú ·¥°·¥Ä…¥…¥·¥Ä ·¥Ö·¥è…¥·¥Ä·¥õ·¥á.

 è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ö…™ Ä·¥á·¥Ñ·¥õ ü è ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç è ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä @Legend\_coder “ì·¥è Ä ·¥Ö·¥è…¥·¥Ä·¥õ…™…¥…¢ ·¥è Ä  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥†…™s…™·¥õ ·¥ç è s·¥ú·¥©·¥©·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ @the\_support\_chat ·¥Ä…¥·¥Ö ·¥Äs·¥ã ·¥õ ú·¥á Ä·¥á ·¥Ä ô·¥è·¥ú·¥õ ·¥Ö·¥è…¥·¥Ä·¥õ…™·¥è…¥."""

IMPORTED = {}
MIGRATEABLE = []
HELPABLE = {}
STATS = []
USER_INFO = []
DATA_IMPORT = []
DATA_EXPORT = []
CHAT_SETTINGS = {}
USER_SETTINGS = {}

for module_name in ALL_MODULES:
    imported_module = importlib.import_module("MukeshRobot.modules." + module_name)
    if not hasattr(imported_module, "__mod_name__"):
        imported_module.__mod_name__ = imported_module.__name__

    if imported_module.__mod_name__.lower() not in IMPORTED:
        IMPORTED[imported_module.__mod_name__.lower()] = imported_module
    else:
        raise Exception("Can't have two modules with the same name! Please change one")

    if hasattr(imported_module, "__help__") and imported_module.__help__:
        HELPABLE[imported_module.__mod_name__.lower()] = imported_module

    # Chats to migrate on chat_migrated events
    if hasattr(imported_module, "__migrate__"):
        MIGRATEABLE.append(imported_module)

    if hasattr(imported_module, "__stats__"):
        STATS.append(imported_module)

    if hasattr(imported_module, "__user_info__"):
        USER_INFO.append(imported_module)

    if hasattr(imported_module, "__import_data__"):
        DATA_IMPORT.append(imported_module)

    if hasattr(imported_module, "__export_data__"):
        DATA_EXPORT.append(imported_module)

    if hasattr(imported_module, "__chat_settings__"):
        CHAT_SETTINGS[imported_module.__mod_name__.lower()] = imported_module

    if hasattr(imported_module, "__user_settings__"):
        USER_SETTINGS[imported_module.__mod_name__.lower()] = imported_module


# do not async
def send_help(chat_id, text, keyboard=None):
    if not keyboard:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))
    dispatcher.bot.send_photo(
        chat_id=chat_id,
        photo=START_IMG,
        caption=text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard,
    )

def start(update: Update, context: CallbackContext):
    args = context.args
    global uptime
    uptime = get_readable_time((time.time() - StartTime))
    if update.effective_chat.type == "private":
        if len(args) >= 1:
            if args[0].lower() == "help":
                send_help(update.effective_chat.id, HELP_STRINGS)
            elif args[0].lower().startswith("ghelp_"):
                mod = args[0].lower().split("_", 1)[1]
                if not HELPABLE.get(mod, False):
                    return
                send_help(
                    update.effective_chat.id,
                    HELPABLE[mod].__help__,
                    InlineKeyboardMarkup(
                        [[InlineKeyboardButton(text="‚óÅ", callback_data="help_back")]]
                    ),
                )
            elif args[0].lower() == "markdownhelp":
                IMPORTED["ex·¥õ Ä·¥Äs"].markdown_help_sender(update)
            elif args[0].lower().startswith("stngs_"):
                match = re.match("stngs_(.*)", args[0].lower())
                chat = dispatcher.bot.getChat(match.group(1))

                if is_user_admin(chat, update.effective_user.id):
                    send_settings(match.group(1), update.effective_user.id, False)
                else:
                    send_settings(match.group(1), update.effective_user.id, True)

            elif args[0][1:].isdigit() and "r·¥ú ü·¥ás" in IMPORTED:
                IMPORTED["r·¥ú ü·¥ás"].send_rules(update, args[0], from_pm=True)

        else:
            first_name = update.effective_user.first_name
            
            x=update.effective_message.reply_sticker(
                "CAACAgUAAxkBAAI33mLYLNLilbRI-sKAAob0P7koTEJNAAIOBAACl42QVKnra4sdzC_uKQQ")
            x.delete()
            usr = update.effective_user
            lol = update.effective_message.reply_text(
                PM_START_TEX.format(usr.first_name), parse_mode=ParseMode.MARKDOWN
            )
            time.sleep(0.4)
            lol.edit_text("‚ù§")
            time.sleep(0.5)
            lol.edit_text("‚ö°")
            time.sleep(0.3)
            lol.edit_text("Íú±·¥õ·¥Ä Ä·¥õ…™…¥…¢... ")
            time.sleep(0.4)
            lol.delete()
            
            update.effective_message.reply_photo(START_IMG,PM_START_TEXT.format(escape_markdown(first_name), BOT_NAME,sql.num_users(),sql.num_chats()),
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode=ParseMode.MARKDOWN,
                timeout=60,
            )
    else:
        update.effective_message.reply_photo(
            START_IMG,
            caption="…¥·¥õ Í≠ôÕ¢ ·¥õ·¥ú ú·¥Ä…¥ ·¥Ä ü…™·¥†·¥á  ô·¥Ä ô è  !\n<b>…¢·¥°  ô·¥á ü·¥ú·¥ç ·¥õ…™·¥Ö·¥ú Ä ·¥Ö·¥Ä Ä…™‚Äã:</b> <code>{}</code>".format(
                uptime
            ),
            parse_mode=ParseMode.HTML,
        )


def error_handler(update, context):
    """Log the error and send a telegram message to notify the developer."""
    # Log the error before we do anything else, so we can see it even if something breaks.
    LOGGER.error(msg="Exception while handling an update:", exc_info=context.error)

    # traceback.format_exception returns the usual python message about an exception, but as a
    # list of strings rather than a single string, so we have to join them together.
    tb_list = traceback.format_exception(
        None, context.error, context.error.__traceback__
    )
    tb = "".join(tb_list)

    # Build the message with some markup and additional information about what happened.
    message = (
        "An exception was raised while handling an update\n"
        "<pre>update = {}</pre>\n\n"
        "<pre>{}</pre>"
    ).format(
        html.escape(json.dumps(update.to_dict(), indent=2, ensure_ascii=False)),
        html.escape(tb),
    )

    if len(message) >= 4096:
        message = message[:4096]
    # Finally, send the message
    context.bot.send_message(chat_id=OWNER_ID, text=message, parse_mode=ParseMode.HTML)


# for test purposes
def error_callback(update: Update, context: CallbackContext):
    error = context.error
    try:
        raise error
    except Unauthorized:
        print("no nono1")
        print(error)
        # remove update.message.chat_id from conversation list
    except BadRequest:
        print("no nono2")
        print("BadRequest caught")
        print(error)

        # handle malformed requests - read more below!
    except TimedOut:
        print("no nono3")
        # handle slow connection problems
    except NetworkError:
        print("no nono4")
        # handle other connection problems
    except ChatMigrated as err:
        print("no nono5")
        print(err)
        # the chat_id of a group has changed, use e.new_chat_id instead
    except TelegramError:
        print(error)
        # handle all other telegram related errors


def help_button(update, context):
    query = update.callback_query
    mod_match = re.match(r"help_module\((.+?)\)", query.data)
    prev_match = re.match(r"help_prev\((.+?)\)", query.data)
    next_match = re.match(r"help_next\((.+?)\)", query.data)
    back_match = re.match(r"help_back", query.data)

    print(query.message.chat.id)

    try:
        if mod_match:
            module = mod_match.group(1)
            text = (
                "¬ª *·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös Íú∞·¥è Ä‚Äã‚Äã* *{}* :\n".format(
                    HELPABLE[module].__mod_name__
                )
                + HELPABLE[module].__help__
            )
            query.message.edit_caption(text,
                parse_mode=ParseMode.MARKDOWN,
                
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help_back"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url=f"https://t.me/Berlinmusic_support")]]
                ),
            )

        elif prev_match:
            curr_page = int(prev_match.group(1))
            query.message.edit_caption(HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(curr_page - 1, HELPABLE, "help")
                ),
            )

        elif next_match:
            next_page = int(next_match.group(1))
            query.message.edit_caption(HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(next_page + 1, HELPABLE, "help")
                ),
            )

        elif back_match:
            query.message.edit_caption(HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, HELPABLE, "help")
                ),
            )

        # ensure no spinny white circle
        context.bot.answer_callback_query(query.id)
        # query.message.delete()

    except BadRequest:
        pass


def Mukesh_about_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "mukesh_":
        uptime = get_readable_time((time.time() - StartTime))
        query.message.edit_caption(f"* ú·¥Ä…™ ·¥ç·¥á·¥ã,*\n  *…™…¥…™ ·¥Ä·¥Ö·¥Ä ü·¥Ä ú {dispatcher.bot.first_name}*"
            "\n* ô·¥è·¥õ ·¥ç·¥Ä…¥·¥Ä…¢·¥á + ·¥ç·¥úÍú±…™·¥Ñ + …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á·¥Ö Íú±·¥õ Ä…™…¥…¢*"
            "\n* ô·¥è·¥õ  ô…™·¥ÄÍú±·¥Ä ·¥Ä·¥ä·¥Ä Íú±·¥Ä·¥ç·¥Ä ·¥ã è·¥ã  è·¥Ä…¥…¢  ü·¥Ä…™…¥.*"
            "\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            f"\n*‚û• ·¥ú·¥©·¥õ…™·¥ç·¥á ¬ª* {uptime}"
            f"\n*‚û• ·¥ús·¥á Äs ¬ª* {sql.num_users()}"
            f"\n*‚û• ·¥Ñ ú·¥Ä·¥õs ¬ª* {sql.num_chats()}"
            "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            "\n*‚û• ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä : @Foundermidnight.*"
            f"\n\n*‚û• ·¥ã ü…™·¥ã ·¥õ·¥è·¥ç ô·¥è ü ·¥Ö…™  ô·¥Ä·¥°·¥Ä ú ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥·¥Ö·¥Ä·¥ò·¥Ä·¥õ·¥ã·¥Ä…¥ …™…¥Íú∞·¥è ·¥õ·¥á…¥·¥õ·¥Ä…¥…¢ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä·¥Ä…¥  ô·¥è·¥õ {dispatcher.bot.first_name}.*",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
        [
            InlineKeyboardButton(text="·¥ä·¥Ä·¥ä·¥Ä…¥·¥Ä…¥ ·¥õ·¥á ü·¥á üì©", callback_data="Music_bot"),
        ],
        [
            InlineKeyboardButton(text="·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ‚ÅâÔ∏è", callback_data="donation_help"),
            InlineKeyboardButton(text="·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ üíà", callback_data="mukesh_support"),
        ],
        [
            InlineKeyboardButton(text="·¥Ö·¥á·¥† üëë", callback_data="expert_help"),
            InlineKeyboardButton(text="·¥Ö·¥è…¥·¥ÄÍú±…™üí∞", callback_data="Main_help"),
        ],
    [
        InlineKeyboardButton(
            text="‚ûï ·¥õ·¥Ä·¥ç ô·¥Ä ú·¥ã·¥Ä…¥ …¢·¥° ·¥ã·¥á …¢ Ä·¥è·¥ú·¥ò  ü·¥ú ‚ûï",
            url=f"https://t.me/{dispatcher.bot.username}?startgroup=true",
        ),
    ]

]
            ),
        )
    elif query.data == "mukesh_support":
        query.message.edit_caption("**·¥Ö…™ ô·¥Ä·¥°·¥Ä ú …™…¥…™  ô·¥á ô·¥á Ä·¥Ä·¥ò·¥Ä ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ ·¥Ö·¥Ä…¥ ·¥á·¥Ö…™·¥õ·¥è Ä ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç […¥·¥õ x ·¥õ·¥ú ú·¥Ä…¥](https://t.me/Foundermidnight).**"
            f"\n\nÍú±…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ã ü…™·¥ã  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥Ö…™  ô·¥Ä·¥°·¥Ä ú..",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="·¥Ö·¥è…¥·¥ÄÍú±…™üí∞", callback_data="Music_extra"),
                    ],
                    [
                        InlineKeyboardButton(text="·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ", callback_data="basic_help"),
                    ],
                    [
                        InlineKeyboardButton(text="·¥è Ä·¥Ö·¥á Ä ·¥†·¥†…™·¥ò  ô·¥è·¥ã·¥á·¥ò", callback_data="source_"),
                    ],
                    [
                        InlineKeyboardButton(text="‚óÅ ·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="mukesh_"),
                    ],
                ]
            ),
        )
    elif query.data == "mukesh_back":
        first_name = update.effective_user.first_name 
        query.message.edit_caption(PM_START_TEXT.format(escape_markdown(first_name), BOT_NAME,sql.num_users(),sql.num_chats()),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN,
            timeout=60,
        )
def MukeshRobot_Main_Callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "Main_help":
        query.message.edit_caption("**‚úÆ ·¥ç…™…¥…™·¥ç·¥Ä ü …¥ è·¥ú·¥ç ô·¥Ä…¥…¢  ü·¥Ä ú ·¥õ·¥è·¥Ö ·¥Ä…¢·¥Ä Ä  ô·¥è·¥õ…¥ è·¥Ä …™·¥Ö·¥ú·¥ò ·¥õ·¥á Ä·¥úÍú±**" 
        f"\n\n·¥ã ü…™·¥ã ·¥Ä·¥ä·¥Ä  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥Ö·¥Ä…¥·¥Ä ·¥Ö…™ ô·¥Ä·¥°·¥Ä ú ·¥Ö…™·¥õ·¥ú…¥…¢…¢·¥ú Íú±·¥ú·¥ç ô·¥Ä…¥…¢·¥Ä…¥ è·¥Ä..",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="·¥Ö·¥Ä…¥·¥Äüí∞", url=f"https://link.dana.id/qr/ag3zovr2"),
                    ],
                    [
                        InlineKeyboardButton(text="‚óÅ ·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="mukesh_"),
                    ],
                ]
            ),
        )
    elif query.data=="basic_help":
        query.message.edit_caption(
"""‚úÆ ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ …™…¥…™ ·¥Ö…™  ô·¥ú·¥Ä·¥õ  ô·¥á Ä·¥õ·¥ú·¥ä·¥ú·¥Ä…¥  ú·¥Ä·¥†·¥á Íú∞·¥ú…¥ ·¥Ö·¥Ä…¥ Íú±·¥Ä ü…™…¥…¢ ·¥ç·¥á Ä·¥Ä…¥…¢·¥ã·¥ú ü, ·¥Ö…™Íú±…™…¥…™ …¢·¥Ä ô·¥Ä·¥Ö·¥Ä  è·¥Ä…¥…¢ …¥·¥Ä·¥ç·¥Ä…¥ è·¥Ä ·¥ò·¥á·¥õ…™…¥…¢…¢…™" Íú±·¥á·¥ç·¥ú·¥Ä  Ä·¥Ä·¥õ·¥Ä ·¥ã·¥è…¥·¥õ·¥è ü

 ü·¥ú  ô…™Íú±·¥Ä ·¥ä·¥è…™…¥ …¢ Ä·¥è·¥ú·¥òÍú± ·¥Ö…™ ô·¥Ä·¥°·¥Ä ú, ·¥ã·¥Ä ü·¥è ·¥ç·¥Ä·¥ú …¥…¢·¥á ·¥Ä·¥Ö·¥ç…™…¥  ü·¥Ä…¥…¢Íú±·¥ú…¥…¢ ·¥ò·¥Ñ·¥ò·¥Ñ ·¥Ä·¥ä·¥Ä …¥·¥õ :
""",parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="“ì·¥è·¥ú…¥·¥Ö·¥á Ä", callback_data="Music_admin"),
                    ],
                    [ 
                        InlineKeyboardButton(text="·¥ç…™·¥Ö…¥…™…¢ ú·¥õ s·¥áx", url=f"https://t.me/+sgGJJiq6lgw0ODA1"),
                        InlineKeyboardButton(text="…¢…™ Ä ü…¥…™…¢ ú·¥õ", url=f"https://t.me/+xWMHhocgchlhMDA1"),
                        InlineKeyboardButton(text=" ú·¥á ü üs ·¥Ä…¥…¢·¥á üs", url=f"https://t.me/+470sYYvVO3FhYTg1"),
                    ],
                    [
                         InlineKeyboardButton(text="‚óÅ ·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="Music_"),
                    ],
                ]
            ),
            )
    elif query.data=="mukesh_back":
        query.message.edit_caption("""·¥Ö…™ ô·¥Ä·¥°·¥Ä ú ·¥Ä·¥Ö·¥Ä ü·¥Ä ú …¥·¥Ä·¥ç·¥Ä …¥·¥Ä·¥ç·¥Ä “ì·¥è·¥ú…¥·¥Ö·¥á Ä ·¥Ö…™·¥ç·¥Äs…™…¥…¢" …¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä·¥õ ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ.
        """,parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="…¥·¥õ", url=f"https://t.me/FounderMidnight"),
                    ],
                    [ 
                        InlineKeyboardButton(text="‚óÅ ·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="basic_help"),
                    ],
                ]
            ),
            )                                        
    elif query.data=="advance_help":
        query.message.edit_caption("**‚úÆ ·¥ç…™…¥…™·¥ç·¥Ä ü …¥ è·¥ú·¥ç ô·¥Ä…¥…¢  ü·¥Ä ú ·¥õ·¥è·¥Ö ·¥Ä…¢·¥Ä Ä  ô·¥è·¥õ…¥ è·¥Ä …™·¥Ö·¥ú·¥ò ·¥õ·¥á Ä·¥úÍú±**"
        f"\n\n·¥ã ü…™·¥ã ·¥Ä·¥ä·¥Ä  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥Ö·¥Ä…¥·¥Ä ·¥Ö…™ ô·¥Ä·¥°·¥Ä ú ·¥Ö…™·¥õ·¥ú…¥…¢…¢·¥ú Íú±·¥ú·¥ç ô·¥Ä…¥…¢·¥Ä…¥ è·¥Ä..",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="·¥Ö·¥Ä…¥·¥Äüí∞", url=f"https://link.dana.id/qr/ag3zovr2"),
                    ],
                    [
                        InlineKeyboardButton(text="‚óÅ ·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="donation_help"),
                    ],
                ]
            ),
        )
    elif query.data=="expert_help":
        query.message.edit_caption("**·¥ã·¥Ä ü·¥è  ô·¥è·¥õ…¥ è·¥Ä  ô·¥á Ä·¥ç·¥ÄÍú±·¥Ä ü·¥Ä ú ·¥ã·¥Ä ü…™·¥Ä…¥  ô…™Íú±·¥Ä  ú·¥ú ô·¥ú…¥…¢…™ ·¥ã·¥è…¥·¥õ·¥Ä·¥ã ·¥Ö…™ ô·¥Ä·¥°·¥Ä ú …™…¥…™, ·¥è·¥ã·¥á ·¥ç·¥á·¥ã.**"
        f"\n\n·¥ä·¥Ä…¥…¢·¥Ä…¥  ü·¥ú·¥ò·¥Ä ·¥ò·¥Ä·¥ã·¥á Íú±·¥Ä ü·¥Ä·¥ç ·¥ç·¥á·¥ã ·¥ã·¥Ä ü·¥è ·¥ò·¥Ñ ·¥è Ä·¥Ä…¥…¢ …™·¥õ·¥ú.",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢ …¥·¥õ¬†Í≠ôÕ¢ ·¥õ·¥ú ú·¥Ä…¥  ü·¥ú ‚Ä¢", url=f"https://t.me/Foundermidnight"),
                        InlineKeyboardButton(text="‚Ä¢ ·¥Äss…™s·¥õ·¥Ä…¥·¥õ …¥·¥õ ‚Ä¢", url=f"https://t.me/FounderGirlnight"),
                    ],
                    [
                        InlineKeyboardButton(text="‚óÅ ·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="mukesh_"),
                    ]
                ]
            ),
            )
    elif query.data=="donation_help":
        query.message.edit_caption("** ü·¥ú ·¥õ…™…¥…¢…¢·¥Ä ü ·¥ò…™ ü…™ ú + ·¥ã ü…™·¥ã ·¥ç·¥Ä·¥ú ·¥ã·¥Ä·¥õ·¥á…¢·¥è Ä…™  è·¥Ä…¥…¢ ·¥ç·¥Ä…¥·¥Ä ·¥ç·¥á·¥ã, ·¥ã·¥Ä ü·¥è  ü·¥è  ô…™…¥…¢·¥ú…¥…¢ ·¥ã·¥á [s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ](https://t.me/Berlinmusic_support),**"
            f"\n\n·¥ã·¥Ä ü·¥è ·¥ç·¥Ä·¥ú ·¥Ö·¥è…¥·¥ÄÍú±…™ ·¥ã ü…™·¥ã ·¥Ä·¥ä·¥Ä  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥Ö·¥è…¥·¥ÄÍú±…™  è·¥Ä.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="·¥Ö·¥è…¥·¥ÄÍú±…™üí∞", callback_data="advance_help"),
                    ],
                    [
                        InlineKeyboardButton(text="·¥ç·¥Ä…¥·¥Ä…¢·¥áüóÇ", callback_data="help_back"),
                        InlineKeyboardButton(text="·¥ç·¥úÍú±…™·¥Ñüéß", callback_data="Music_play"),
                    ],
                    [
                        InlineKeyboardButton(text="‚Ä¢·¥ã·¥á·¥ç ô·¥Ä ü…™‚Ä¢", callback_data="mukesh_"),
                    ],
                ]
            ),
            )  
def Source_about_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "source_":
        query.message.edit_caption(
            f"""
ùôªùô∏ùöÇùöÉ ùô∂ùöÅùöÑùôø ùöÖùô∏ùôø ùô±ùôæùô∫ùô¥ùôø 

ùöÉùô∞ùôªùô¥ùôΩùöÉ = 50ùô∫
ùô∏ùôΩùô≥ùôæ = 50ùô∫
ùô≤ùô∞ùôºùôøùöÑùöÅùô∞ùôΩ = 50ùöî
ùô±ùôæùô≤ùô∏ùôª = 50ùöî
ùô±ùô≥ùöÇùôº = 50ùô∫
ùô∑ùô¥ùôΩùöÉùô∞ùô∏ = 50ùô∫
ùôøùô¥ùôªùô∞ùôπùô∞ùöÅ 50ùô∫
ùô∑ùô∏ùôπùô∞ùô± = 30ùô∫
ùôπùô∞ùöÖ = 30ùô∫ 
ùôæùôºùô¥ùöÉùöÖ & ùôªùô∏ùöÖùô¥ ùöÇùöÉùöÅùô¥ùô∞ùôºùô∏ùôΩùô∂ = 30ùô∫

ùó£ùóòùó•ùó£ùóîùóûùóòùóß ! ! !

ùôøùô∞ùô∫ùô¥ùöÉ ùô≤ùô¥ùöÅùô∏ùô∞
250ùô∫ 7 ùô∂ùöÅùöÑùôø
ùöêùöõùöûùöô ùöíùöóùöçùöò + ùöêùöõùöûùöô ùöùùöäùöïùöéùöóùöù

ùôøùô∞ùô∫ùô¥ùöÉ ùôºùô∞ùôΩùô∏ùöÇ
200ùô∫ 5 ùô∂ùöÅùöÑùôø
ùöêùöõùöûùöô ùöíùöóùöçùöò + ùöêùöõùöûùöô ùöùùöäùöïùöéùöóùöù

ùôøùô∞ùô∫ùô¥ùöÉ ùô∑ùôæùôΩùô¥ùöà
150ùô∫ 4 ùô∂ùöÅùöÑùôø 
ùöêùöõùöûùöô ùöíùöóùöçùöò + ùöêùöõùöûùöô ùöùùöäùöïùöéùöóùöù

ùôøùô∞ùô∫ùô¥ùöÉ ùô∂ùô∞ùôΩùöÉùô¥ùôΩùô∂
100ùô∫ 3 ùô∂ùöÅùöÑùôø 
ùöêùöõùöûùöô ùöíùöóùöçùöò + ùöêùöõùöûùöô ùöùùöäùöïùöéùöóùöù
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢ ·¥Ä·¥Ö·¥ç…™…¥ 1", url=f"https://t.me/Foundermidnight"),
                    ],
                    [
                         InlineKeyboardButton(text="‚óÅ ·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="mukesh_support"),
                    ]
                ]
            ),
            )          
    elif query.data == "source_back":
        first_name = update.effective_user.first_name
        query.message.edit_caption(
            PM_START_TEXT.format(escape_markdown(first_name), BOT_NAME,sql.num_users(),sql.num_chats()),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN,
            timeout=60,
            
        )

        
def Music_about_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "Music_":
        query.message.edit_caption("**·¥Ö…™ ô·¥Ä·¥°·¥Ä ú …™…¥…™  ô·¥á ô·¥á Ä·¥Ä·¥ò·¥Ä ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ ·¥Ö·¥Ä…¥ ·¥†·¥Ñs  Ä·¥á·¥Ä ü ·¥è Ä·¥õ Ä·¥ás.).**"
        f"\n\nÍú±…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ã ü…™·¥ã  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥Ö…™  ô·¥Ä·¥°·¥Ä ú..",
        
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                         InlineKeyboardButton(text="·¥Ö·¥è…¥·¥ÄÍú±…™üí∞", callback_data="Music_extra"),
                    ],
                    [
                         InlineKeyboardButton(text="·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ", callback_data="basic_help"),
                    ],
                    [
                         InlineKeyboardButton(text="·¥è Ä·¥Ö·¥á Ä ·¥†·¥†…™·¥ò  ô·¥è·¥ã·¥á·¥ò", callback_data="source_"),
                    ],
                    [
                        InlineKeyboardButton(text="‚óÅ ·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="mukesh_"),
                    ]
                ]
            ),
        )
    elif query.data == "Music_admin":
        query.message.edit_caption("""‚úÆ ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ …™…¥…™ ·¥Ö…™  ô·¥ú·¥Ä·¥õ  ô·¥á Ä·¥õ·¥ú·¥ä·¥ú·¥Ä…¥  ú·¥Ä·¥†·¥á Íú∞·¥ú…¥ ·¥Ö·¥Ä…¥ Íú±·¥Ä ü…™…¥…¢ ·¥ç·¥á Ä·¥Ä…¥…¢·¥ã·¥ú ü ·¥Ö…™ ô·¥Ä·¥°·¥Ä ú ·¥Ä·¥Ö·¥Ä ü·¥Ä ú …¥·¥Ä·¥ç·¥Ä …¥·¥Ä·¥ç·¥Ä “ì·¥è·¥ú…¥·¥Ö·¥á Ä ·¥Ö…™·¥ç·¥Äs…™…¥…¢" …¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä·¥õ ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ.
        """,parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="…¥·¥õ", url=f"https://t.me/FounderMidnight"),
                    ],
                    [ 
                        InlineKeyboardButton(text="‚óÅ ·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="basic_help"),
                    ],
                ]
            ),
            )
    elif query.data == "Music_play":
        query.message.edit_caption(f"*¬ª ·¥ò ü·¥Ä è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ¬´*"
            f"""
/play or /vplay  - ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç·¥ú ü·¥Ä…™  ô·¥è·¥õ …¥ è·¥Ä ·¥Ö·¥Ä…¥ ·¥ç·¥á·¥ç·¥ú·¥õ·¥Ä Ä ·¥ã·¥Ä…¥  ü·¥Ä…¢·¥ú Íú±·¥áÍú±·¥ú·¥Ä…™  è·¥Ä…¥…¢ ·¥Ö…™  Ä·¥áQ·¥ú·¥áÍú±·¥õ ·¥ã·¥Ä…¥.

/cplay or /cvplay  -  ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç·¥ú·¥õ·¥Ä Ä ·¥ç·¥úÍú±…™·¥Ñ ·¥è Ä ·¥†…™·¥Ö·¥á·¥è ·¥Ö…™ ·¥Ñ ú·¥Ä…¥…¥·¥á ü  è·¥Ä…¥…¢ Íú±·¥ú·¥Ö·¥Ä ú ·¥Ö…™ Íú±·¥Ä·¥ç ô·¥ú…¥…¢·¥ã·¥Ä…¥ ·¥ã·¥á ·¥Ö·¥Ä ü·¥Ä·¥ç …¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä·¥õ.

/channelplay [·¥Ñ ú·¥Ä·¥õ ·¥úÍú±·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä …™·¥Ö] ·¥è Ä [·¥Ö…™Íú±·¥Ä ô ü·¥á] - ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ ·¥ã·¥Ä…¥ ·¥Ö·¥ú ü·¥ú ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥ã·¥á·¥Ö·¥Ä ü·¥Ä·¥ç …¢ Ä·¥è·¥ú·¥ò  è·¥Ä…¥…¢ Íú±·¥ú·¥Ö·¥Ä ú ·¥Ö…™  ô·¥ú·¥Ä·¥õ  ü·¥Ä ü·¥ú ·¥ã·¥á·¥õ…™·¥ã /·¥Ñ ú·¥Ä…¥…¥·¥á ü·¥ò ü·¥Ä è (…™·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥è Ä ·¥úÍú±·¥á Ä…¥·¥Ä·¥ç·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü) ·¥Ö…™ ·¥Ö·¥Ä ü·¥Ä·¥ç …¢ Ä·¥è·¥ú·¥òÍú±  è…¢ Íú±·¥ú·¥Ö·¥Ä ú ·¥Ö…™ ·¥ã·¥Ä…™·¥õ·¥ã·¥Ä…¥ ·¥ã·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ·¥á ÄÍú±·¥á ô·¥ú·¥õ..


* ô·¥è·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú±*
  ô·¥è·¥õ  Íú±·¥á Ä·¥†·¥á Ä ·¥ò ü·¥Ä è ü…™Íú±·¥õÍú±:
/playlist  -  ·¥Ñ·¥á·¥ã ·¥ò ü·¥Ä è ü…™Íú±·¥õ  è·¥Ä…¥…¢ Íú±·¥ú·¥Ö·¥Ä ú ·¥Ö…™ Íú±·¥õ·¥è·¥Ñ·¥ã Íú±·¥á ô·¥á ü·¥ú·¥ç…¥ è·¥Ä.
/deleteplaylist - ·¥ç·¥á…¥…¢ ú·¥Ä·¥ò·¥úÍú± ·¥ò ü·¥Ä è ü…™Íú±·¥õ  è·¥Ä…¥…¢ Íú±·¥ú·¥Ö·¥Ä ú ·¥Ö…™ Íú±…™·¥ç·¥ò·¥Ä…¥.
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚óÅ ·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="donation_help"),
                    ]
                ]
            ),
        )
    elif query.data == "Music_bot":
        query.message.edit_caption("""¬ª  ô·¥á Ä…™·¥ã·¥ú·¥õ …™…¥…™ ·¥Ä·¥Ö·¥Ä ü·¥Ä ú s·¥õ·¥è Ä·¥á J·¥ÄJ·¥Ä…¥·¥Ä…¥ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç + ·¥Ö…™·¥Ä·¥ç·¥è…¥·¥Ö ·¥ç ü, ·¥ã·¥Ä ü…™·¥Ä…¥ ·¥ã ü…™·¥ã ·¥ÄJ·¥Ä  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥Ö…™ ô·¥Ä·¥°·¥Ä ú J…™·¥ã·¥Ä …™…¥…¢…™…¥ ·¥ç·¥á·¥ç ô·¥á ü…™ ·¥Ö…™ s·¥õ·¥è Ä·¥á ·¥ã·¥Ä·¥ç…™, ·¥õ·¥á Ä…™·¥ç·¥Ä ·¥ã·¥Äs…™ ú s·¥á ü·¥Ä·¥ç·¥Ä·¥õ  ô·¥á Ä ô·¥á ü·¥Ä…¥J·¥Ä.
""",parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text=" s·¥õ·¥è Ä·¥á ·¥¢·¥á·¥°·¥á…¥s è ", url=f"https://t.me/zewensy"),
                    ],
                    [
                        InlineKeyboardButton(text=" ·¥Ö…™·¥Ä·¥ç·¥è…¥·¥Ö ·¥ç ü ", url=f"https://t.me/atnesstore/26"),
                        InlineKeyboardButton(text=" ·¥õ·¥á ü·¥ò Ä·¥á·¥ç ", url=f"https://t.me/atnesstore/2"),
                    ],
                    [
                        InlineKeyboardButton(text=" …¥·¥è·¥ã·¥ès ", url=f"https://t.me/atnesstore/65"),
                        InlineKeyboardButton(text=" ·¥ú ô·¥è·¥õ ", url=f"https://t.me/atnesstore/2"),
                    ],
                    [
                        InlineKeyboardButton(text="‚óÅ ·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="mukesh_"),
                    ]
                ]
            ),
        )
    elif query.data == "Music_extra":
        query.message.edit_caption("**‚úÆ ·¥ç…™…¥…™·¥ç·¥Ä ü …¥ è·¥ú·¥ç ô·¥Ä…¥…¢  ü·¥Ä ú ·¥õ·¥è·¥Ö ·¥Ä…¢·¥Ä Ä  ô·¥è·¥õ…¥ è·¥Ä …™·¥Ö·¥ú·¥ò ·¥õ·¥á Ä·¥úÍú±**"
        f"\n\n·¥ã ü…™·¥ã ·¥Ä·¥ä·¥Ä  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥Ö·¥Ä…¥·¥Ä ·¥Ö…™ ô·¥Ä·¥°·¥Ä ú ·¥Ö…™·¥õ·¥ú…¥…¢…¢·¥ú Íú±·¥ú·¥ç ô·¥Ä…¥…¢·¥Ä…¥ è·¥Ä..",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="·¥Ö·¥Ä…¥·¥Äüí∞", url=f"https://link.dana.id/qr/ag3zovr2"),
                    ],
                    [
                        InlineKeyboardButton(text="‚óÅ ·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="Music_"),
                    ],
                ]
            ),
        )
    elif query.data == "Music_back":
        first_name = update.effective_user.first_name
        query.message.edit_caption(PM_START_TEXT.format(escape_markdown(first_name), BOT_NAME),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN,
            timeout=60,

        )


def get_help(update: Update, context: CallbackContext):
    chat = update.effective_chat  # type: Optional[Chat]
    args = update.effective_message.text.split(None, 1)

    # ONLY send help in PM
    if chat.type != chat.PRIVATE:
        if len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
            module = args[1].lower()
            update.effective_message.reply_photo(START_IMG,
                f"Contact me in PM to get help of {module.capitalize()}",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="  ú·¥á ü·¥ò ‚Äã",
                                url="t.me/{}?start=ghelp_{}".format(
                                    context.bot.username, module
                                ),
                            )
                        ]
                    ]
                ),
            )
            return
        update.effective_message.reply_photo(START_IMG,"¬ª W ú·¥á Ä·¥á ·¥Ö·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥è·¥ò·¥á…¥ ·¥õ ú·¥á s·¥á·¥õ·¥õ…™…¥…¢s ·¥ç·¥á…¥·¥ú?.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="  ô·¥ú·¥ã·¥Ä ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä·¥õ",
                            url="https://t.me/{}?start=help".format(context.bot.username),
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="  ô·¥ú·¥ã·¥Ä ·¥Ö…™s…™…¥…™",
                            callback_data="help_back",
                        )
                    ],
                ]
            ),
        )
        return

    elif len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
        module = args[1].lower()
        text = (
            "Here is the available help for the *{}* module:\n".format(
                HELPABLE[module].__mod_name__
            )
            + HELPABLE[module].__help__
        )
        send_help(
            chat.id,
            text,
            InlineKeyboardMarkup(
                [[InlineKeyboardButton(text="‚óÅ", callback_data="help_back"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url=f"https://t.me/Berlinmusic_support")]]
            ),
        )

    else:
        send_help(chat.id, HELP_STRINGS)


def send_settings(chat_id, user_id, user=False):
    if user:
        if USER_SETTINGS:
            settings = "\n\n".join(
                "*{}*:\n{}".format(mod.__mod_name__, mod.__user_settings__(user_id))
                for mod in USER_SETTINGS.values()
            )
            dispatcher.bot.send_message(
                user_id,
                "These are your current settings:" + "\n\n" + settings,
                parse_mode=ParseMode.MARKDOWN,
            )

        else:
            dispatcher.bot.send_message(
                user_id,
                "Seems like there aren't any user specific settings available :'(",
                parse_mode=ParseMode.MARKDOWN,
            )

    else:
        if CHAT_SETTINGS:
            chat_name = dispatcher.bot.getChat(chat_id).title
            dispatcher.bot.send_message(
                user_id,
                text="Which module would you like to check {}'s settings for?".format(
                    chat_name
                ),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)
                ),
            )
        else:
            dispatcher.bot.send_message(
                user_id,
                "Seems like there aren't any chat settings available :'(\nSend this "
                "in a group chat you're admin in to find its current settings!",
                parse_mode=ParseMode.MARKDOWN,
            )


def settings_button(update: Update, context: CallbackContext):
    query = update.callback_query
    user = update.effective_user
    bot = context.bot
    mod_match = re.match(r"stngs_module\((.+?),(.+?)\)", query.data)
    prev_match = re.match(r"stngs_prev\((.+?),(.+?)\)", query.data)
    next_match = re.match(r"stngs_next\((.+?),(.+?)\)", query.data)
    back_match = re.match(r"stngs_back\((.+?)\)", query.data)
    try:
        if mod_match:
            chat_id = mod_match.group(1)
            module = mod_match.group(2)
            chat = bot.get_chat(chat_id)
            text = "*{}* has the following settings for the *{}* module:\n\n".format(
                escape_markdown(chat.title), CHAT_SETTINGS[module].__mod_name__
            ) + CHAT_SETTINGS[module].__chat_settings__(chat_id, user.id)
            query.message.reply_text(text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="‚óÅ",
                                callback_data="stngs_back({})".format(chat_id),
                            )
                        ]
                    ]
                ),
            )

        elif prev_match:
            chat_id = prev_match.group(1)
            curr_page = int(prev_match.group(2))
            chat = bot.get_chat(chat_id)
            query.message.reply_text("""Hi there! There are quite a few settings for {} - go ahead and pick what "
                you're interested in.""".format(chat.title),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(
                        curr_page - 1, CHAT_SETTINGS, "stngs", chat=chat_id
                    )
                ),
            )

        elif next_match:
            chat_id = next_match.group(1)
            next_page = int(next_match.group(2))
            chat = bot.get_chat(chat_id)
            query.message.reply_text(text=
                """Hi there! There are quite a few settings for {} - go ahead and pick what 
                you're interested in.""".format(chat.title),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(
                        next_page + 1, CHAT_SETTINGS, "stngs", chat=chat_id
                    )
                ),
            )

        elif back_match:
            chat_id = back_match.group(1)
            chat = bot.get_chat(chat_id)
            query.message.reply_text("""Hi there! There are quite a few settings for {} - go ahead and pick what 
                you're interested in.""".format(escape_markdown(chat.title)),
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)
                ),
            )

        # ensure no spinny white circle
        bot.answer_callback_query(query.id)
        query.message.delete()
    except BadRequest as excp:
        if excp.message not in [
            "Message is not modified",
            "Query_id_invalid",
            "Message can't be deleted",
        ]:
            LOGGER.exception("Exception in settings buttons. %s", str(query.data))


def get_settings(update: Update, context: CallbackContext):
    chat = update.effective_chat  # type: Optional[Chat]
    user = update.effective_user  # type: Optional[User]
    msg = update.effective_message  # type: Optional[Message]

    # ONLY send settings in PM
    if chat.type != chat.PRIVATE:
        if is_user_admin(chat, user.id):
            text = "·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è …¢·¥á·¥õ ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ's s·¥á·¥õ·¥õ…™…¥…¢s ·¥Äs ·¥°·¥á ü ü ·¥Äs  è·¥è·¥ú Äs"
            msg.reply_photo(START_IMG,text,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="s·¥á·¥õ·¥õ…™…¥…¢s‚Äã",
                                url="t.me/{}?start=stngs_{}".format(
                                    context.bot.username, chat.id
                                ),
                            )
                        ]
                    ]
                ),
            )
        else:
            text = "·¥ã ü…™·¥ã ·¥Ö…™s…™…¥…™ ·¥ã·¥Ä ü·¥è  ü·¥ú ·¥ç·¥Ä·¥ú ·¥Ñ·¥á·¥ã s·¥á·¥õ·¥õ…™…¥…¢·¥Ä…¥  ü·¥ú"

    else:
        send_settings(chat.id, user.id, True)


def donate(update: Update, context: CallbackContext):
    user = update.effective_message.from_user
    chat = update.effective_chat  # type: Optional[Chat]
    bot = context.bot
    if chat.type == "private":
        update.effective_message.reply_text(
            DONATE_STRING, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True
        )

        if OWNER_ID != 6024180996:
            update.effective_message.reply_text(
                f"¬ª ·¥õ ú·¥á ·¥Ö·¥á·¥†·¥á ü·¥è·¥©·¥á Ä ·¥è“ì {dispatcher.bot.first_name} s·¥è·¥ú Ä·¥Ñ·¥á ·¥Ñ·¥è·¥Ö·¥á …™s […¢…™·¥õ ú·¥ú ô](https://github.com/petinggi)"
                f"\n\n ô·¥ú·¥õ  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ä üs·¥è ·¥Ö·¥è…¥·¥Ä·¥õ·¥á ·¥õ·¥è ·¥õ ú·¥á ·¥©·¥á Äs·¥è…¥ ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è  Ä·¥ú…¥…¥…™…¥…¢ ·¥ç·¥á : [ ú·¥á Ä·¥á]({DONATE_STRING})",
                parse_mode=ParseMode.MARKDOWN,
                
            )

    else:
        try:
            bot.send_message(
                user.id,
                DONATE_STRING,
                parse_mode=ParseMode.MARKDOWN,
                
            )

            update.effective_message.reply_text(
                "…™'·¥†·¥á ·¥ò·¥ç'·¥á·¥Ö  è·¥è·¥ú ·¥Ä ô·¥è·¥ú·¥õ ·¥Ö·¥è…¥·¥Ä·¥õ…™…¥…¢ ·¥õ·¥è ·¥ç è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä!"
            )
        except Unauthorized:
            update.effective_message.reply_text(
                "·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç·¥á …™…¥ ·¥ò·¥ç “ì…™ Äs·¥õ ·¥õ·¥è …¢·¥á·¥õ ·¥Ö·¥è…¥·¥Ä·¥õ…™·¥è…¥ …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥."
            )


def migrate_chats(update: Update, context: CallbackContext):
    msg = update.effective_message  # type: Optional[Message]
    if msg.migrate_to_chat_id:
        old_chat = update.effective_chat.id
        new_chat = msg.migrate_to_chat_id
    elif msg.migrate_from_chat_id:
        old_chat = msg.migrate_from_chat_id
        new_chat = update.effective_chat.id
    else:
        return

    LOGGER.info("Migrating from %s, to %s", str(old_chat), str(new_chat))
    for mod in MIGRATEABLE:
        mod.__migrate__(old_chat, new_chat)

    LOGGER.info("Successfully migrated!")
    raise DispatcherHandlerStop


def main():
    global x
    x=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="‚ûï·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õ‚ûï",
                            url="https://t.me/groupcontrollertgbot?startgroup=true"
                            )
                       ]
                ]
                     )
    if SUPPORT_CHAT is not None and isinstance(SUPPORT_CHAT, str):
        try:
            dispatcher.bot.send_photo(
                f"@Berlinmusic_support",
                photo=f"https://telegra.ph//file/3163a7f6a49b9c42e6c52.jpg",
                caption=f"""
‚ú®…¥·¥õ ·¥ç·¥Ä…¥·¥Ä…¢·¥á …™s ·¥Ä ü…™·¥†·¥á  ô·¥Ä ô è.
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‡πè **·¥ç·¥Ä…™…¥·¥õ·¥á…¥·¥Ä…¥·¥Ñ·¥á  ô è :** […¥·¥õ](tg://user?id=994039943)

‡πè ** “ì·¥è·¥ú…¥·¥Ö·¥á Ä :** [·¥ç…™·¥Ö…¥…™…¢ ú·¥õ](https://t.me/hellsangelsarea)
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
""",reply_markup=x,
                parse_mode=ParseMode.MARKDOWN,
            )
        except Unauthorized:
            LOGGER.warning(
                f"Bot isn't able to send message to @{SUPPORT_CHAT}, go and check!"
            )
        except BadRequest as e:
            LOGGER.warning(e.message)
    start_handler = CommandHandler("start", start, run_async=True)

    help_handler = CommandHandler("help", get_help, run_async=True)
    help_callback_handler = CallbackQueryHandler(
        help_button, pattern=r"help_.*", run_async=True
    )

    settings_handler = CommandHandler("settings", get_settings, run_async=True)
    settings_callback_handler = CallbackQueryHandler(
        settings_button, pattern=r"stngs_", run_async=True
    )

    about_callback_handler = CallbackQueryHandler(
        Mukesh_about_callback, pattern=r"mukesh_", run_async=True
    )
    source_callback_handler = CallbackQueryHandler(
        Source_about_callback, pattern=r"source_", run_async=True
    )
    music_callback_handler = CallbackQueryHandler(
        Music_about_callback, pattern=r"Music_",run_async=True
    )
    mukeshrobot_main_handler = CallbackQueryHandler(
        MukeshRobot_Main_Callback, pattern=r".*_help",run_async=True)
    donate_handler = CommandHandler("donate", donate)
    migrate_handler = MessageHandler(Filters.status_update.migrate, migrate_chats)
    dispatcher.add_handler(start_handler)
    dispatcher.add_handler(help_handler)
    dispatcher.add_handler(about_callback_handler)
    dispatcher.add_handler(music_callback_handler)
    dispatcher.add_handler(settings_handler)
    dispatcher.add_handler(help_callback_handler)
    dispatcher.add_handler(settings_callback_handler)
    dispatcher.add_handler(migrate_handler)
    dispatcher.add_handler(donate_handler)
    dispatcher.add_handler(mukeshrobot_main_handler)
    dispatcher.add_error_handler(error_callback)
    dispatcher.add_handler(source_callback_handler)
    LOGGER.info("Using long polling.")
    updater.start_polling(timeout=15, read_latency=4, drop_pending_updates=True)

    if len(argv) not in (1, 3, 4):
        telethn.disconnect()
    else:
        telethn.run_until_disconnected()

    updater.idle()


if __name__ == "__main__":
    LOGGER.info("Successfully loaded modules: " + str(ALL_MODULES))
    telethn.start(bot_token=TOKEN)
    pbot.start()
    main()
